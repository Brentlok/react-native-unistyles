///
/// JFunc_void_PlatformEvent.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <functional>
#include "PlatformEvent.hpp"
#include "JPlatformEvent.hpp"

namespace margelo::nitro::unistyles {

  using namespace facebook;

  /**
   * C++ representation of the callback Func_void_PlatformEvent.
   * This is a Kotlin `(event: PlatformEvent) -> Unit`, backed by a `std::function<...>`.
   */
  struct JFunc_void_PlatformEvent final: public jni::HybridClass<JFunc_void_PlatformEvent> {
  public:
    static jni::local_ref<JFunc_void_PlatformEvent::javaobject> fromCpp(const std::function<void(PlatformEvent /* event */)>& func) {
      return JFunc_void_PlatformEvent::newObjectCxxArgs(func);
    }

  public:
    void call(const jni::alias_ref<JPlatformEvent>& event) {
      return _func(event->toCpp());
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/unistyles/Func_void_PlatformEvent;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JFunc_void_PlatformEvent::call)});
    }

  private:
    explicit JFunc_void_PlatformEvent(const std::function<void(PlatformEvent /* event */)>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<void(PlatformEvent /* event */)> _func;
  };

} // namespace margelo::nitro::unistyles
