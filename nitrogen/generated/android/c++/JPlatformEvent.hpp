///
/// JPlatformEvent.hpp
/// Mon Sep 02 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "PlatformEvent.hpp"

namespace margelo::nitro::unistyles {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "PlatformEvent" and the the Kotlin enum "PlatformEvent".
   */
  struct JPlatformEvent final: public jni::JavaClass<JPlatformEvent> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/unistyles/PlatformEvent;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum PlatformEvent.
     */
    [[maybe_unused]]
    PlatformEvent toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<PlatformEvent>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JPlatformEvent> fromCpp(PlatformEvent value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldONORIENTATIONCHANGE = clazz->getStaticField<JPlatformEvent>("ONORIENTATIONCHANGE");
      static const auto fieldONCONTENTSIZECATEGORYCHANGE = clazz->getStaticField<JPlatformEvent>("ONCONTENTSIZECATEGORYCHANGE");
      static const auto fieldONSCREENSIZECHANGE = clazz->getStaticField<JPlatformEvent>("ONSCREENSIZECHANGE");
      
      switch (value) {
        case PlatformEvent::ONORIENTATIONCHANGE:
          return clazz->getStaticFieldValue(fieldONORIENTATIONCHANGE);
        case PlatformEvent::ONCONTENTSIZECATEGORYCHANGE:
          return clazz->getStaticFieldValue(fieldONCONTENTSIZECATEGORYCHANGE);
        case PlatformEvent::ONSCREENSIZECHANGE:
          return clazz->getStaticFieldValue(fieldONSCREENSIZECHANGE);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::runtime_error("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::unistyles
