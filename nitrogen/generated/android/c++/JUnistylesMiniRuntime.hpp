///
/// JUnistylesMiniRuntime.hpp
/// Fri Sep 13 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "UnistylesMiniRuntime.hpp"

#include "ColorScheme.hpp"
#include "Dimensions.hpp"
#include "Insets.hpp"
#include "JColorScheme.hpp"
#include "JDimensions.hpp"
#include "JInsets.hpp"
#include "JOrientation.hpp"
#include "Orientation.hpp"
#include <optional>
#include <string>

namespace margelo::nitro::unistyles {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "UnistylesMiniRuntime" and the the Kotlin data class "UnistylesMiniRuntime".
   */
  struct JUnistylesMiniRuntime final: public jni::JavaClass<JUnistylesMiniRuntime> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/unistyles/UnistylesMiniRuntime;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct UnistylesMiniRuntime by copying all values to C++.
     */
    [[maybe_unused]]
    UnistylesMiniRuntime toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldColorScheme = clazz->getField<JColorScheme>("colorScheme");
      jni::local_ref<JColorScheme> colorScheme = this->getFieldValue(fieldColorScheme);
      static const auto fieldHasAdaptiveThemes = clazz->getField<bool>("hasAdaptiveThemes");
      bool hasAdaptiveThemes = this->getFieldValue(fieldHasAdaptiveThemes);
      static const auto fieldScreen = clazz->getField<JDimensions>("screen");
      jni::local_ref<JDimensions> screen = this->getFieldValue(fieldScreen);
      static const auto fieldThemeName = clazz->getField<jni::JString>("themeName");
      jni::local_ref<jni::JString> themeName = this->getFieldValue(fieldThemeName);
      static const auto fieldContentSizeCategory = clazz->getField<jni::JString>("contentSizeCategory");
      jni::local_ref<jni::JString> contentSizeCategory = this->getFieldValue(fieldContentSizeCategory);
      static const auto fieldBreakpoint = clazz->getField<jni::JString>("breakpoint");
      jni::local_ref<jni::JString> breakpoint = this->getFieldValue(fieldBreakpoint);
      static const auto fieldInsets = clazz->getField<JInsets>("insets");
      jni::local_ref<JInsets> insets = this->getFieldValue(fieldInsets);
      static const auto fieldOrientation = clazz->getField<JOrientation>("orientation");
      jni::local_ref<JOrientation> orientation = this->getFieldValue(fieldOrientation);
      static const auto fieldPixelRatio = clazz->getField<double>("pixelRatio");
      double pixelRatio = this->getFieldValue(fieldPixelRatio);
      static const auto fieldFontScale = clazz->getField<double>("fontScale");
      double fontScale = this->getFieldValue(fieldFontScale);
      static const auto fieldRtl = clazz->getField<bool>("rtl");
      bool rtl = this->getFieldValue(fieldRtl);
      static const auto fieldStatusBar = clazz->getField<JDimensions>("statusBar");
      jni::local_ref<JDimensions> statusBar = this->getFieldValue(fieldStatusBar);
      static const auto fieldNavigationBar = clazz->getField<JDimensions>("navigationBar");
      jni::local_ref<JDimensions> navigationBar = this->getFieldValue(fieldNavigationBar);
      return UnistylesMiniRuntime(
        colorScheme->toCpp(),
        hasAdaptiveThemes,
        screen->toCpp(),
        themeName != nullptr ? std::make_optional(themeName->toStdString()) : std::nullopt,
        contentSizeCategory->toStdString(),
        breakpoint != nullptr ? std::make_optional(breakpoint->toStdString()) : std::nullopt,
        insets->toCpp(),
        orientation->toCpp(),
        pixelRatio,
        fontScale,
        rtl,
        statusBar->toCpp(),
        navigationBar->toCpp()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JUnistylesMiniRuntime::javaobject> fromCpp(const UnistylesMiniRuntime& value) {
      return newInstance(
        JColorScheme::fromCpp(value.colorScheme),
        value.hasAdaptiveThemes,
        JDimensions::fromCpp(value.screen),
        value.themeName.has_value() ? jni::make_jstring(value.themeName.value()) : nullptr,
        jni::make_jstring(value.contentSizeCategory),
        value.breakpoint.has_value() ? jni::make_jstring(value.breakpoint.value()) : nullptr,
        JInsets::fromCpp(value.insets),
        JOrientation::fromCpp(value.orientation),
        value.pixelRatio,
        value.fontScale,
        value.rtl,
        JDimensions::fromCpp(value.statusBar),
        JDimensions::fromCpp(value.navigationBar)
      );
    }
  };

} // namespace margelo::nitro::unistyles
