///
/// Unistyles-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNativePlatformSpec` to properly resolve imports.
namespace margelo::nitro::unistyles { class HybridNativePlatformSpec; }
// Forward declaration of `UnistyleDependency` to properly resolve imports.
namespace margelo::nitro::unistyles { enum class UnistyleDependency; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNativePlatformSpecCxx` to properly resolve imports.
namespace Unistyles { class HybridNativePlatformSpecCxx; }

// Include C++ defined types
#include "HybridNativePlatformSpec.hpp"
#include "UnistyleDependency.hpp"
#include <functional>
#include <memory>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::unistyles::bridge::swift {

  // pragma MARK: std::vector<UnistyleDependency>
  /**
   * Specialized version of `std::vector<UnistyleDependency>`.
   */
  using std__vector_UnistyleDependency_ = std::vector<UnistyleDependency>;
  inline std::vector<UnistyleDependency> create_std__vector_UnistyleDependency_(size_t size) {
    std::vector<UnistyleDependency> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)>
  /**
   * Specialized version of `std::function<void(const std::vector<UnistyleDependency>&)>`.
   */
  using Func_void_std__vector_UnistyleDependency_ = std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<UnistyleDependency>& / * dependencies * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_UnistyleDependency__Wrapper final {
  public:
    explicit Func_void_std__vector_UnistyleDependency__Wrapper(const std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)>& func): _function(func) {}
    explicit Func_void_std__vector_UnistyleDependency__Wrapper(std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)>&& func): _function(std::move(func)) {}
    inline void call(std::vector<UnistyleDependency> dependencies) const {
      _function(dependencies);
    }
  private:
    std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)> _function;
  };
  inline Func_void_std__vector_UnistyleDependency_ create_Func_void_std__vector_UnistyleDependency_(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, std::vector<UnistyleDependency>), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__vector_UnistyleDependency_([sharedClosureHolder, call](const std::vector<UnistyleDependency>& dependencies) -> void {
      call(sharedClosureHolder.get(), dependencies);
    });
  }
  inline std::shared_ptr<Func_void_std__vector_UnistyleDependency__Wrapper> share_Func_void_std__vector_UnistyleDependency_(const Func_void_std__vector_UnistyleDependency_& value) {
    return std::make_shared<Func_void_std__vector_UnistyleDependency__Wrapper>(value);
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(const std::function<void()>& func): _function(func) {}
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::move(func)) {}
    inline void call() const {
      _function();
    }
  private:
    std::function<void()> _function;
  };
  inline Func_void create_Func_void(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void([sharedClosureHolder, call]() -> void {
      call(sharedClosureHolder.get());
    });
  }
  inline std::shared_ptr<Func_void_Wrapper> share_Func_void(const Func_void& value) {
    return std::make_shared<Func_void_Wrapper>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::unistyles::HybridNativePlatformSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::unistyles::HybridNativePlatformSpec>`.
   */
  using std__shared_ptr_margelo__nitro__unistyles__HybridNativePlatformSpec_ = std::shared_ptr<margelo::nitro::unistyles::HybridNativePlatformSpec>;
  std::shared_ptr<margelo::nitro::unistyles::HybridNativePlatformSpec> create_std__shared_ptr_margelo__nitro__unistyles__HybridNativePlatformSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__unistyles__HybridNativePlatformSpec_(std__shared_ptr_margelo__nitro__unistyles__HybridNativePlatformSpec_ cppType);

} // namespace margelo::nitro::unistyles::bridge::swift
