///
/// Unistyles-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `UnistyleDependency` to properly resolve imports.
namespace margelo::nitro::unistyles { enum class UnistyleDependency; }

// Include C++ defined types
#if __has_include("UnistyleDependency.hpp")
 #include "UnistyleDependency.hpp"
#endif
#if __has_include(<functional>)
 #include <functional>
#endif
#if __has_include(<memory>)
 #include <memory>
#endif
#if __has_include(<optional>)
 #include <optional>
#endif
#if __has_include(<string>)
 #include <string>
#endif
#if __has_include(<vector>)
 #include <vector>
#endif

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::unistyles::bridge::swift {

  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  /**
   * Specialized version of `std::vector<UnistyleDependency>`.
   */
  using std__vector_UnistyleDependency_ = std::vector<UnistyleDependency>;
  inline std::vector<UnistyleDependency> create_std__vector_UnistyleDependency_(size_t size) {
    std::vector<UnistyleDependency> vector;
    vector.reserve(size);
    return vector;
  }
  
  /**
   * Specialized version of `std::function<void(const std::vector<UnistyleDependency>&)>`.
   */
  using Func_void_std__vector_UnistyleDependency_ = std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<UnistyleDependency>& / * dependencies * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_UnistyleDependency__Wrapper {
  public:
    explicit Func_void_std__vector_UnistyleDependency__Wrapper(const std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)>& func): function(func) {}
    explicit Func_void_std__vector_UnistyleDependency__Wrapper(std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)>&& func): function(std::move(func)) {}
  
    void call(std::vector<UnistyleDependency> dependencies) const {
      function(dependencies);
    }
  
    std::function<void(const std::vector<UnistyleDependency>& /* dependencies */)> function;
  };
  inline Func_void_std__vector_UnistyleDependency_ create_Func_void_std__vector_UnistyleDependency_(void* closureHolder, void(*call)(void* /* closureHolder */, std::vector<UnistyleDependency>), void(*destroy)(void*)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__vector_UnistyleDependency_([sharedClosureHolder, call](const std::vector<UnistyleDependency>& dependencies) -> void {
      call(sharedClosureHolder.get(), dependencies);
    });
  }
  inline std::shared_ptr<Func_void_std__vector_UnistyleDependency__Wrapper> share_Func_void_std__vector_UnistyleDependency_(const Func_void_std__vector_UnistyleDependency_& value) {
    return std::make_shared<Func_void_std__vector_UnistyleDependency__Wrapper>(value);
  }
  
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }

} // namespace margelo::nitro::unistyles::bridge::swift
