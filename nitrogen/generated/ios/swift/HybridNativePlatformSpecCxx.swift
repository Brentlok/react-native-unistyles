///
/// HybridNativePlatformSpecCxx.swift
/// Fri Aug 16 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridNativePlatformSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public final class HybridNativePlatformSpecCxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::unistyles::bridge::swift`)
   * from `Unistyles-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.unistyles.bridge.swift

  /**
   * Holds an instance of the `HybridNativePlatformSpec` Swift protocol.
   */
  private(set) var implementation: HybridNativePlatformSpec

  /**
   * Create a new `HybridNativePlatformSpecCxx` that wraps the given `HybridNativePlatformSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: HybridNativePlatformSpec) {
    self.implementation = implementation
  }

  /**
   * Contains a (weak) reference to the C++ HybridObject to cache it.
   */
  public var hybridContext: margelo.nitro.HybridContext {
    get {
      return self.implementation.hybridContext
    }
    set {
      self.implementation.hybridContext = newValue
    }
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  public var memorySize: Int {
    return self.implementation.memorySize
  }

  // Properties
  

  // Methods
  @inline(__always)
  public func getColorScheme() -> std.string {
    do {
      let result = try self.implementation.getColorScheme()
      return std.string(result)
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func getFontScale() -> Double {
    do {
      let result = try self.implementation.getFontScale()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func getContentSizeCategory() -> std.string {
    do {
      let result = try self.implementation.getContentSizeCategory()
      return std.string(result)
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func setRootViewBackgroundColor(hex: bridge.std__optional_std__string_, alpha: bridge.std__optional_double_) -> Void {
    do {
      try self.implementation.setRootViewBackgroundColor(hex: { () -> String? in
        if let actualValue = hex.value {
          return String(actualValue)
        } else {
          return nil
        }
      }(), alpha: { () -> Double? in
        if let actualValue = alpha.value {
          return actualValue
        } else {
          return nil
        }
      }())
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func setNavigationBarBackgroundColor(hex: bridge.std__optional_std__string_, alpha: bridge.std__optional_double_) -> Void {
    do {
      try self.implementation.setNavigationBarBackgroundColor(hex: { () -> String? in
        if let actualValue = hex.value {
          return String(actualValue)
        } else {
          return nil
        }
      }(), alpha: { () -> Double? in
        if let actualValue = alpha.value {
          return actualValue
        } else {
          return nil
        }
      }())
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func setNavigationBarHidden(isHidden: Bool) -> Void {
    do {
      try self.implementation.setNavigationBarHidden(isHidden: isHidden)
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func setStatusBarStyle(style: Int32) -> Void {
    do {
      try self.implementation.setStatusBarStyle(style: margelo.nitro.unistyles.StatusBarStyle(rawValue: style)!)
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func setStatusBarHidden(isHidden: Bool) -> Void {
    do {
      try self.implementation.setStatusBarHidden(isHidden: isHidden)
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func setStatusBarBackgroundColor(hex: bridge.std__optional_std__string_, alpha: bridge.std__optional_double_) -> Void {
    do {
      try self.implementation.setStatusBarBackgroundColor(hex: { () -> String? in
        if let actualValue = hex.value {
          return String(actualValue)
        } else {
          return nil
        }
      }(), alpha: { () -> Double? in
        if let actualValue = alpha.value {
          return actualValue
        } else {
          return nil
        }
      }())
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func setImmersiveMode(isEnabled: Bool) -> Void {
    do {
      try self.implementation.setImmersiveMode(isEnabled: isEnabled)
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
}
