///
/// HybridNativePlatformSpecCxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridNativePlatformSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public final class HybridNativePlatformSpecCxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::unistyles::bridge::swift`)
   * from `Unistyles-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.unistyles.bridge.swift

  /**
   * Holds an instance of the `HybridNativePlatformSpec` Swift protocol.
   */
  private(set) var implementation: HybridNativePlatformSpec

  /**
   * Create a new `HybridNativePlatformSpecCxx` that wraps the given `HybridNativePlatformSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: HybridNativePlatformSpec) {
    self.implementation = implementation
  }

  /**
   * Contains a (weak) reference to the C++ HybridObject to cache it.
   */
  public var hybridContext: margelo.nitro.HybridContext {
    get {
      return self.implementation.hybridContext
    }
    set {
      self.implementation.hybridContext = newValue
    }
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  public var memorySize: Int {
    return self.implementation.memorySize
  }

  // Properties


  // Methods
  @inline(__always)
  public func getInsets() -> Insets {
    do {
      let result = try self.implementation.getInsets()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getColorScheme() -> Int32 {
    do {
      let result = try self.implementation.getColorScheme()
      return result.rawValue
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getFontScale() -> Double {
    do {
      let result = try self.implementation.getFontScale()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getPixelRatio() -> Double {
    do {
      let result = try self.implementation.getPixelRatio()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getOrientation() -> Int32 {
    do {
      let result = try self.implementation.getOrientation()
      return result.rawValue
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getContentSizeCategory() -> std.string {
    do {
      let result = try self.implementation.getContentSizeCategory()
      return std.string(result)
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getScreenDimensions() -> Dimensions {
    do {
      let result = try self.implementation.getScreenDimensions()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getStatusBarDimensions() -> Dimensions {
    do {
      let result = try self.implementation.getStatusBarDimensions()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getNavigationBarDimensions() -> Dimensions {
    do {
      let result = try self.implementation.getNavigationBarDimensions()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getPrefersRtlDirection() -> Bool {
    do {
      let result = try self.implementation.getPrefersRtlDirection()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func setRootViewBackgroundColor(color: Double) -> Void {
    do {
      try self.implementation.setRootViewBackgroundColor(color: color)
      return
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func setNavigationBarBackgroundColor(color: Double) -> Void {
    do {
      try self.implementation.setNavigationBarBackgroundColor(color: color)
      return
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func setNavigationBarHidden(isHidden: Bool) -> Void {
    do {
      try self.implementation.setNavigationBarHidden(isHidden: isHidden)
      return
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func setStatusBarBackgroundColor(color: Double) -> Void {
    do {
      try self.implementation.setStatusBarBackgroundColor(color: color)
      return
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func setImmersiveMode(isEnabled: Bool) -> Void {
    do {
      try self.implementation.setImmersiveMode(isEnabled: isEnabled)
      return
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func getMiniRuntime() -> UnistylesNativeMiniRuntime {
    do {
      let result = try self.implementation.getMiniRuntime()
      return result
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }

  @inline(__always)
  public func registerPlatformListener(callback: bridge.Func_void_std__vector_UnistyleDependency_) -> Void {
    do {
      try self.implementation.registerPlatformListener(callback: { () -> (([UnistyleDependency]) -> Void) in
        let shared = bridge.share_Func_void_std__vector_UnistyleDependency_(callback)
        return { (dependencies: [UnistyleDependency]) -> Void in
          shared.pointee.call({ () -> bridge.std__vector_UnistyleDependency_ in
          var vector = bridge.create_std__vector_UnistyleDependency_(dependencies.count)
          for item in dependencies {
            vector.push_back(item)
          }
          return vector
        }())
        }
      }())
      return
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
}
