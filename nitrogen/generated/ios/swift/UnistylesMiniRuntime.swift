///
/// UnistylesMiniRuntime.swift
/// Fri Sep 13 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `UnistylesMiniRuntime`, backed by a C++ struct.
 */
public typealias UnistylesMiniRuntime = margelo.nitro.unistyles.UnistylesMiniRuntime

public extension UnistylesMiniRuntime {
  private typealias bridge = margelo.nitro.unistyles.bridge.swift

  /**
   * Create a new instance of `UnistylesMiniRuntime`.
   */
  init(colorScheme: ColorScheme, hasAdaptiveThemes: Bool, screen: Dimensions, themeName: String?, contentSizeCategory: String, breakpoint: String?, insets: Insets, orientation: Orientation, pixelRatio: Double, fontScale: Double, rtl: Bool, statusBar: Dimensions, navigationBar: Dimensions) {
    self.init(colorScheme, hasAdaptiveThemes, screen, { () -> bridge.std__optional_std__string_ in
      if let actualValue = themeName {
        return bridge.create_std__optional_std__string_(std.string(actualValue))
      } else {
        return .init()
      }
    }(), std.string(contentSizeCategory), { () -> bridge.std__optional_std__string_ in
      if let actualValue = breakpoint {
        return bridge.create_std__optional_std__string_(std.string(actualValue))
      } else {
        return .init()
      }
    }(), insets, orientation, pixelRatio, fontScale, rtl, statusBar, navigationBar)
  }

  var colorScheme: ColorScheme {
    @inline(__always)
    get {
      return self.__colorScheme
    }
    @inline(__always)
    set {
      self.__colorScheme = newValue
    }
  }
  
  var hasAdaptiveThemes: Bool {
    @inline(__always)
    get {
      return self.__hasAdaptiveThemes
    }
    @inline(__always)
    set {
      self.__hasAdaptiveThemes = newValue
    }
  }
  
  var screen: Dimensions {
    @inline(__always)
    get {
      return self.__screen
    }
    @inline(__always)
    set {
      self.__screen = newValue
    }
  }
  
  var themeName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let actualValue = self.__themeName.value {
          return String(actualValue)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__themeName = { () -> bridge.std__optional_std__string_ in
        if let actualValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(actualValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var contentSizeCategory: String {
    @inline(__always)
    get {
      return String(self.__contentSizeCategory)
    }
    @inline(__always)
    set {
      self.__contentSizeCategory = std.string(newValue)
    }
  }
  
  var breakpoint: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let actualValue = self.__breakpoint.value {
          return String(actualValue)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__breakpoint = { () -> bridge.std__optional_std__string_ in
        if let actualValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(actualValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var insets: Insets {
    @inline(__always)
    get {
      return self.__insets
    }
    @inline(__always)
    set {
      self.__insets = newValue
    }
  }
  
  var orientation: Orientation {
    @inline(__always)
    get {
      return self.__orientation
    }
    @inline(__always)
    set {
      self.__orientation = newValue
    }
  }
  
  var pixelRatio: Double {
    @inline(__always)
    get {
      return self.__pixelRatio
    }
    @inline(__always)
    set {
      self.__pixelRatio = newValue
    }
  }
  
  var fontScale: Double {
    @inline(__always)
    get {
      return self.__fontScale
    }
    @inline(__always)
    set {
      self.__fontScale = newValue
    }
  }
  
  var rtl: Bool {
    @inline(__always)
    get {
      return self.__rtl
    }
    @inline(__always)
    set {
      self.__rtl = newValue
    }
  }
  
  var statusBar: Dimensions {
    @inline(__always)
    get {
      return self.__statusBar
    }
    @inline(__always)
    set {
      self.__statusBar = newValue
    }
  }
  
  var navigationBar: Dimensions {
    @inline(__always)
    get {
      return self.__navigationBar
    }
    @inline(__always)
    set {
      self.__navigationBar = newValue
    }
  }
}
