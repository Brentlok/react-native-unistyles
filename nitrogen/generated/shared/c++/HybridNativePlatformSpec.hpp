///
/// HybridNativePlatformSpec.hpp
/// Fri Aug 16 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Insets` to properly resolve imports.
namespace margelo::nitro::unistyles { struct Insets; }
// Forward declaration of `StatusBarStyle` to properly resolve imports.
namespace margelo::nitro::unistyles { enum class StatusBarStyle; }

#include "Insets.hpp"
#include <string>
#include <optional>
#include "StatusBarStyle.hpp"

namespace margelo::nitro::unistyles {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NativePlatform`
   * Inherit this class to create instances of `HybridNativePlatformSpec` in C++.
   * @example
   * ```cpp
   * class HybridNativePlatform: public HybridNativePlatformSpec {
   *   // ...
   * };
   * ```
   */
  class HybridNativePlatformSpec: public HybridObject {
    public:
      // Constructor
      explicit HybridNativePlatformSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNativePlatformSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual Insets getInsets() = 0;
      virtual std::string getColorScheme() = 0;
      virtual double getFontScale() = 0;
      virtual std::string getContentSizeCategory() = 0;
      virtual void setRootViewBackgroundColor(const std::optional<std::string>& hex, std::optional<double> alpha) = 0;
      virtual void setNavigationBarBackgroundColor(const std::optional<std::string>& hex, std::optional<double> alpha) = 0;
      virtual void setNavigationBarHidden(bool isHidden) = 0;
      virtual void setStatusBarStyle(StatusBarStyle style) = 0;
      virtual void setStatusBarHidden(bool isHidden) = 0;
      virtual void setStatusBarBackgroundColor(const std::optional<std::string>& hex, std::optional<double> alpha) = 0;
      virtual void setImmersiveMode(bool isEnabled) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NativePlatform";
  };

} // namespace margelo::nitro::unistyles
