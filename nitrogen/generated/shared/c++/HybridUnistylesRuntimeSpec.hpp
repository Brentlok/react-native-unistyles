///
/// HybridUnistylesRuntimeSpec.hpp
/// Fri Sep 13 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::unistyles { enum class ColorScheme; }
// Forward declaration of `Dimensions` to properly resolve imports.
namespace margelo::nitro::unistyles { struct Dimensions; }
// Forward declaration of `Insets` to properly resolve imports.
namespace margelo::nitro::unistyles { struct Insets; }
// Forward declaration of `Orientation` to properly resolve imports.
namespace margelo::nitro::unistyles { enum class Orientation; }

#include "ColorScheme.hpp"
#include "Dimensions.hpp"
#include <optional>
#include <string>
#include "Insets.hpp"
#include "Orientation.hpp"

namespace margelo::nitro::unistyles {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `UnistylesRuntime`
   * Inherit this class to create instances of `HybridUnistylesRuntimeSpec` in C++.
   * @example
   * ```cpp
   * class HybridUnistylesRuntime: public HybridUnistylesRuntimeSpec {
   *   // ...
   * };
   * ```
   */
  class HybridUnistylesRuntimeSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridUnistylesRuntimeSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridUnistylesRuntimeSpec() { }

    public:
      // Properties
      virtual ColorScheme getColorScheme() = 0;
      virtual bool getHasAdaptiveThemes() = 0;
      virtual Dimensions getScreen() = 0;
      virtual std::optional<std::string> getThemeName() = 0;
      virtual std::string getContentSizeCategory() = 0;
      virtual std::optional<std::string> getBreakpoint() = 0;
      virtual Insets getInsets() = 0;
      virtual Orientation getOrientation() = 0;
      virtual double getPixelRatio() = 0;
      virtual double getFontScale() = 0;
      virtual bool getRtl() = 0;

    public:
      // Methods
      virtual void setTheme(const std::string& themeName) = 0;
      virtual void setAdaptiveThemes(bool isEnabled) = 0;
      virtual void setImmersiveMode(bool isEnabled) = 0;
      virtual void setRootViewBackgroundColor(std::optional<double> color) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "UnistylesRuntime";
  };

} // namespace margelo::nitro::unistyles
